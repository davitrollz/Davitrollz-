local ts = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local lp = Players.LocalPlayer

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local Window = Library:NewWindow("Credits: TGMANKASKE")

local Section = Window:NewSection("Boosts")

-- BOOST SPEED
Section:CreateButton("Boost Speed", function()
    local desiredSpeed = 48
    local function applySpeed(humanoid)
        humanoid.WalkSpeed = desiredSpeed
        humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if humanoid.WalkSpeed ~= desiredSpeed then
                humanoid.WalkSpeed = desiredSpeed
            end
        end)
    end

    local function onCharacterAdded(character)
        local humanoid = character:WaitForChild("Humanoid")
        applySpeed(humanoid)
    end

    if lp.Character then
        onCharacterAdded(lp.Character)
    end

    lp.CharacterAdded:Connect(onCharacterAdded)
end)

-- BOOST JUMP
Section:CreateButton("Boost Jump", function()
    local jumpBoostPower = 62
    local boostEnabled = true

    local function onJumpRequest()
        if boostEnabled and lp.Character and lp.Character:FindFirstChild("Humanoid") then
            local humanoid = lp.Character.Humanoid
            if humanoid.FloorMaterial ~= Enum.Material.Air then
                humanoid.JumpPower = jumpBoostPower
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

                delay(0.1, function()
                    if humanoid then
                        humanoid.JumpPower = 50
                    end
                end)
            end
        end
    end

    UserInputService.JumpRequest:Connect(onJumpRequest)
end)

-- FLOAT (15s) MOBILE+PC
Section:CreateButton("Float (15s) [Mobile+PC]", function()
    local DURATION_SECONDS = 15
    local FLOAT_HEIGHT = 6
    local FLOAT_SPEED = 40
    local POSITION_FORCE = 25000
    local VELOCITY_FORCE = 25000

    local function setupFloat(character)
        local humanoid = character:WaitForChild("Humanoid")
        local hrp = character:WaitForChild("HumanoidRootPart")

        local bodyPos = Instance.new("BodyPosition")
        bodyPos.Name = "FloatPosition"
        bodyPos.P = 10000
        bodyPos.D = 1000
        bodyPos.MaxForce = Vector3.new(0, POSITION_FORCE, 0)
        bodyPos.Position = hrp.Position
        bodyPos.Parent = hrp

        local bodyVel = Instance.new("BodyVelocity")
        bodyVel.Name = "FloatVelocity"
        bodyVel.P = 1250
        bodyVel.MaxForce = Vector3.new(VELOCITY_FORCE, 0, VELOCITY_FORCE)
        bodyVel.Velocity = Vector3.new(0,0,0)
        bodyVel.Parent = hrp

        local running = true

        local conn = RunService.Heartbeat:Connect(function()
            if not running then return end

            local rayParams = RaycastParams.new()
            rayParams.FilterDescendantsInstances = {character}
            rayParams.FilterType = Enum.RaycastFilterType.Blacklist

            local ray = workspace:Raycast(hrp.Position, Vector3.new(0, -1000, 0), rayParams)
            local targetY = hrp.Position.Y
            if ray then
                targetY = ray.Position.Y + FLOAT_HEIGHT
            end

            bodyPos.Position = Vector3.new(hrp.Position.X, targetY, hrp.Position.Z)

            local moveDir = humanoid.MoveDirection
            bodyVel.Velocity = Vector3.new(moveDir.X, 0, moveDir.Z) * FLOAT_SPEED
        end)

        task.delay(DURATION_SECONDS, function()
            running = false
            if conn then conn:Disconnect() end
            if bodyPos then bodyPos:Destroy() end
            if bodyVel then bodyVel:Destroy() end
        end)

        humanoid.Died:Connect(function()
            running = false
            if conn then conn:Disconnect() end
            if bodyPos then bodyPos:Destroy() end
            if bodyVel then bodyVel:Destroy() end
        end)
    end

    if lp.Character then
        setupFloat(lp.Character)
    end

    lp.CharacterAdded:Connect(function(char)
        task.wait(0.5)
        setupFloat(char)
    end)
end)

-- TELEPORTS
local SectionTeleport = Window:NewSection("Teleports")

local savedPos = nil
local speed = 38

SectionTeleport:CreateButton("Save Base Position", function()
    local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if hrp then
        savedPos = hrp.Position
        print("Posição salva!")
    end
end)

SectionTeleport:CreateButton("Go to Saved Position", function()
    local char = lp.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")

    if savedPos and hrp and humanoid then
        humanoid.UseJumpPower = true
        humanoid.JumpPower = 77
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

        task.wait(0.1)

        local distance = (hrp.Position - savedPos).Magnitude
        local duration = distance / speed

        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        local cf = CFrame.new(savedPos + Vector3.new(0, 8, 0))
        local tween = ts:Create(hrp, tweenInfo, {CFrame = cf})
        tween:Play()
    else
        print("Posição salva não encontrada ou personagem inválido!")
    end
end)
